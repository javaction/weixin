================================================================================================================
===========================****************坚持学习坚持锻炼********************=================================
============================================Spring学习笔记======================================================
==============================================2016.05.09========================================================
----前言：用于记录在《spring实战》学习过程中遇到的问题或者比较重要的知识点的标记，最终所有的记录整理到博客中，做
----一件完整的有意义有成长的事情。

注释说明：
"--" ：标题类
"--//"或者"----//" ：标题中解释
"zhengze"标识：自己的理解或者备注性的文字、链接

--第一部分 Spring的核心

--第一章：spring之旅

--spring最根本的使命：简化java开发。

--spring四中关键策略：1.基于POJO的轻量级和最小侵入性编程；2.通过依赖注入和面向切面实现松耦合；
					  3.基于切面和惯例进行声明性编程；4.通过切面和模板减少样板式代码。

--1.spring核心模块
--//spring 由6个明确的模块构成。
	1.spring容器是spring最核心的模块。它负责Bean的创建、装配、配置。（第二章详解）
	2.AOP模块
	3.数据访问与集成
	4.Web和远程调用（Spring MVC框架--第七章；Spring远程调用--第十章）
	5.测试


--2.解耦应用对象
--//关于IOC(控制反转)和DI(依赖注入)，推荐博文：http://www.cnblogs.com/xdp-gacl/p/4249939.html
--//依赖注入让相互协作的软件组件保持松耦合。

--3.使用AOP管理横切关注点
--//AOP(面向切面)编程允许把遍布各处的功能分离出来形成可重用的组件。

在书中的示例中，采用将 ‘游吟诗人的吟唱’ 作为一个自定义切面来使用。这需要在spring的核心配置文件中进行配置：
--//具体操作流程如下：1.定义游吟诗人的类(Minstrel)，实现两个方法：（骑士探险之前的吟唱和探险之后的吟唱）分别作为‘前置通知’、trel，实现两个方法：（骑士探险之前的吟唱和探险之后的吟唱）分别作为‘前置通知’、
				  ‘后置通知’；2.在spring的核心配置文件中定义这个切面。如下：首先，配置游吟诗人类（Minstrel），配置需要使用到<aop>标签和切点表达式语言。具体配置参见书中介绍。

--4.spring的bean容器
--//在基于spring的应用中，应用对象生存于Spring容器中。容器创建、装配、配置对象，并且管理它们的整个生命周期。
-//容器是spring框架的核心。spring容器大致分两种类型：Bean工厂 和 应用上下文。更倾向于使用 应用上下文。

spring 自带多个类型的上下文应用。以以下3种比较常见：
--//1.classPathXmlApplicationContext --- 从类路径下的xml配置文件中加载上下文定义，把应用上下文文件当做类资源。   -- 网络博客，此类的简单使用：http://www.blogjava.net/xcp/archive/2011/06/22/352821.html
--//2.FileSystemXmlapplicationcontext --- 读取文件系统下的xml配置文件并加载上下文定义。
--//3.XmlWebApplicationContext --- 读取web应用下的xml配置文件并装载上下文定义。

--//备注//后面将对 XmlWebApplicationContext 进行详细的解释。

Bean的生命周期：
--//传统的java应用中，bean的周期很简单，使用new关键字进行bean的实例化，这个bean就算被使用了，如果不再使用，就由java自动的进行垃圾回收。
--//sping容器中Bean的生命周期很细腻，正确理解Spring Bean 的生命周期非常重要。
----//1.spring对Bean进行实例化；
	  2.spring将值和Bean的引入注入进bean对应的属性中；
	  3.如果bean实现了 BeanNameAware 接口，spring将Bean的id传递给setBeanName()接口方法；
	  4.如果Bean实现了 BeanFactoryAware 接口，Spring将调用 setBeanFactory()接口方法，将BeanFactory容器实例传入；
	  5.如果Bean实现了 ApplicationContextAware 接口，spring 将调用 setApplicationContext() 接口方法，将应用上下文的引用传入；
	  6.如果Bean实现了 BeanPostProcessor 接口，spring 将调用它们的 postProcessBeforeInitialization接口方法；
	  7.如果Bean实现了InitializingBean接口，Spring将调用它们的 afterPropertiesSet() 接口方法。类似的，如果Bean使用init-method声明了初始化方法，该方法也会被调用；
	  8.如果Bean 实现了BenaPostProcessor接口，spring将调用它们的 postPoressAfterInitialization()方法；
	  9.此时，Bean已经准备就绪，就可以被应用程序使用了，他们一直驻留在  ‘应用上下文’中，直到‘应用上下文’被销毁。
	  10.如果Bean实现了DisposableBean接口，Spring将调用它的Destory()接口方法。同样，如果Bean使用destory-method声明了小辉方法，该方法也会被调用。	


	
--5.Spring的新特性和发展	


--第二章：装配Bean

--创建应用对象之间协作关系的行为通常被称为 ‘装配’，这也是 依赖注入（DI） 的本质。

--创建Spring配置：Spring核心框架自带了10个命名空间配置：
--//1.aop : 为声明切面以及将@AspectJ注解的类代理为spring切面提供了配置元素
	2.beans : 支持声明Bean和装配Bean，是Spring最核心也是最原始的命名空间
	3.context : 为配置Spring应用上下文提供了配置元素，包括自动检测和自动装配Bean、注入非Spring直接管理的对象
	4.jee : 提供了与javaEE API的集成，例如JNDI和EJB
	5.jms : 为声明消息驱动的POJO提供了配置元素
	6.lang : 支持配置由Groovy、JRuby或BeanShell等脚本实现的Bean
	7.mvc : 启用Spring MVC 的能力，例如面向注解的控制器、视图控制器和拦截器
	8.oxm : 支持Spring 的对象到XML的映射配置
	9.tx : 提供声明式事务配置
	10.util : 提供各种各样的工具类元素，包括把集合配置为Bean、支持属性占位符元素

--1.声明Bean
--//声明Bean之后，需要加载配置文件，在这里的测试中使用的是 classPathXmlApplicationContext 和  FileSystemXmlapplicationcontext 的方式。测试通过，具体使用方式，参见博文：http://www.blogjava.net/xcp/archive/2011/06/22/352821.html

--2.构造器注入和Setter方法注入
--//通过构造器注入，标签：<constructor-arg value=""/>  ----ps:博文中较为详细的讲解注入方式：http://blessht.iteye.com/blog/1162131

--3.装配Bean

--//所有的Spring Bean 默认都是单例。
	但是有时需要Bean的被实例化任意次，如 用户购买门票看演出的例子，需要每个用户都是被装配了不同的门票实例。
	这就需要在使用spring装配Bean的时候，能够灵活的指定Bean的作用域。
	
	
--spring 的Bean作用域规则：(通过<bean>中的属性 scope 指定)
--//1.singleton :	在每个Spring容器中，一个Bean定义只有一个对象实例（默认）。	 	
	2.prototype : 可以被实例化任意次。
	3.request : 在一次http请求中，每个bean定义对应一个实例。该作用域仅在基于web的spring上下文（如spring mvc）中才有效。
	4.session : 在一个http Session中，每个bean定义对应一个实例。该作用域仅在基于web的spring上下文（如spring mvc）中才有效。
	5.global-session : 在一个全局http session中，每个bean定义对应一个实例。仅在Portlet上下文中才有效。
	
	
--4.控制Bean的创建和销毁
	
--//在实例化一个Bean时，可能需要执行一些初始化操作来确保该Bean处于可用状态。同理，在不再需要bean，将其从容器中移除时候，我们可能还需要按顺序执行一些清理操作。
	测试初始化一个bean，销毁一个bean。（((ClassPathXmlApplicationContext)app).close();--关闭）借鉴博文：http://outofmemory.cn/java/spring/spring-bean-init-method-and-destroy-method
	
--//备注：1.如果一个Bean依赖另一个bean，注意 装配bean时候的顺序。如：音乐家使用乐器演奏的实例。
		  2.在上面的例子中，如果这个音乐家有洁癖的话，可以采用 装配内部Bean 的形式，给他使用一个单独的乐器。	
	
--使用spring 的命名空间来装配属性：
--zhengze ：如果使用某个命名空间，需要在xml文件配置中增加对应 命名空间的schema URI 说明。具体参见正式的配置文件中样式，一般都会存在。

--装配集合：
--//1.<list> ：装配list类型的值，允许重复；
	2.<set> ：装配set类型的值，不允许重复；
	3.<map> ：装配map类型的值，名称和值可以是任意类型；
			  <map> 中 <entry> 元素由一个键和一个值组成。键 和 值 可以是简单类型，也可以是其他bean的引用。
			  key ： 指定map中entry的键为String；
			  key-ref ：...............为spring上下文中的其他bean的引用；
			  value ：指定map中的entry值为String
			  value-ref ：..............为spring上下文中的其他bean的引用； 
			
	4.<props> ：装配properties类型的值，名称和值必须是String类型的。

--备注：1.当键值对都不是String类型时，将其注入bean属性的唯一方法就是使用<map>元素。但是如果都是String类型时候，就可以考虑使用 <props>进行注入。
		2.区别：<property> 用于将值或者Bean 引入注入到某个Bean的属性中；
				<props> 用于定义一个类型为java.util。Properties的集合；
				<prop> 用于定义<props>中的一个成员。
	
--装配空值：为某个属性设置一个null，可以采用类似：<property name="song" value="《小青蛙》"><null /></property>	
			显式的为属性装配null值，理由1：某个特定场景(需求需要)需要；理由2：为了覆盖自动装配的值。（问题来了：what is 自动装配？）
			
			
--使用表达式装配：如果我们为属性装配的值只有在运行期才能知道，该如何做呢？----->>>答案是Spring表达式语言(Spring Expression Language，SpEL)

--SpEL特性：使用spel表达式需要拼凑各种spel语法的元素。
--//	1.使用Bean的id来引用Bean；
		2.调用方法和访问对象的属性；
		3.对值进行算术、关系和逻辑运算；
		4.正则表达式匹配；
		5.集合操作。
		
--//点点小结：
	1.#{} 标记会提示Spring这个标记里的内容是SpEL表达式。（此处没用详细看，只是了解了下，如果需要，可以详细敲敲代码）
	2.Spring自带多种容器的实现。BeanFactory是最简单的容器，提供基础的依赖注入和Bean装配服务。更高级的可以使用 ApplicationContext

	

--第三章：最小化 Spring XML 配置


--1.Bean的自动装配

--//主要有4种类型自动装配策略 ：在<bean>中 autowire=''
----//1.byName ：把与Bean的属性具有相同名字（或者ID）的其他Bean自动装配到Bean的对应属性中。如果没有跟属性的名字相匹配的Bean，则该属性不进行装配。
	  2.byType ：把与Bean的属性具有相同类型的其他Bean自动装配到Bean的对应属性中。如果没有跟属性的类型相匹配的Bean,则该属性不进行装配。	
	  3.constructor  ：把与Bean的构造器入参具有相同类型的其他Bean自动装配到这个Bean的构造器对应的入参中。
	  4.autodetect ：先通过 constructor 进行自动装配，如果失败，再尝试按照 byType 进行装配。

--zhengze ：1.byName自动装配遵循一项约定：为 Bean(AAA) 的属性自动装配配置文件中所定义的id与该 bean(AAA)	的属性的名字(name) 相同的Bean。
			2.byType ：类似于byName的情况，不过他是通过匹配属性的类型。但是这种匹配方式，有一个局限性，spring可能会寻找到多个Bean，它们的类型与需要自动装配的属性的类型都相一致。
					   基于此，spring为避免可能造成的歧义，提供了 primary 属性，通过标记为true或者false	，给予spring自动装配时一个首选bean。注意设置首选bean时，也需要将其他同类型bean设置为false。
			3.constructor ：同样也存在与byType相同的局限性，当多个bean匹配某个构造器的入参时，spring不会尝试尝试猜测哪个bean更适合自动装配。
			4.autodetect ：略。
			5.在spring的自动装配中，可以选择在根元素<beans>上加 default-autowire 属性为 spring配置文件中 所有的bean应用相同的装配策略。
			6.混合使用自动装配和显示装配 ：既可以在Bean上指定byType，又可以配置其属性<property name =''>等等。比较好的解决了在装配过程中可能存在多个相同类型的情况时造成的混乱。
			  但是某些具有不可共用，如：constructor策略 和 <constructor-arg>	
			
--注解方式自动装配：
--//在spring2.5之后，spring提供注解的形式进行自动装配，这允许更加细粒度的进行操作。但是，spring中这一方式默认是关闭的，需要在spring的核配文件(applicationContext.xml)中进行开启,
	配置方式为  <context:annotation-config />
	
--Spring3 支持的几种不同的用于自动装配的注解：
--//1.Spring 自带的 @Autowired 注解；

----// @Autowired ：可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。
----//相关博文地址：blog.csdn.net/heyutao007/article/details/5981555

----//限定歧义性的依赖：（@Autowired 是通过）为了帮助 @Autowired 更好的鉴定出哪个bean才是需要的，可以使用 @Qualifier(value="") 。所以，在使用 @Autowired 注解时候，最好是也配置上 @Qualifier 这个注解，免得出问题。
----//创建自定义的限定器（Qualifier）：

.........................||||还没整理这部分的。。
.........................||||
	
	2.JSR-330 的 @Inject 注解；
----// @Inject 注解几乎可以完全代替 @Autowired ，可以用来自动装配 属性 、方法 和 构造器。与 @Autowired 不同的是，@Inject 没有 required 属性，所以@Inject所标注的依赖关系必须存在，如果不存在，则会抛出异常。
	
	3.JSR-250 的 @Resource 注解。
	
			
--2.Bean的自动检测
	为自动检测标注Bean
--//默认情况下，<context:component-scan> 查找使用构造器(stereotype)注解所标注的类，特殊的注解，如下：
	1.@Component -- 通用构造型注解，标识该类为spring 组件。（可以把一个普通类实例化到spring容器中，相当于<bean id = '' class="" />）
	2.@Controller -- 标识该类定义为Spring mvc controller 
	3.@Repository -- 标识该类定义为数据仓库 ，一般为 DAO（Data Access Object）
	4.@Service -- 标识该类定义为服务（标注业务层组件）
	
--//相关博文地址：http://blog.csdn.net/chunqiuwei/article/details/16115135 （ <context:component-scan>使用说明 ：注意两个子标签的使用 ，<context:include-filter> 和 <context:exclude-filter>）

zhengze ：关于配置时候的错误及解决思路：
	1.错误信息：Caused by: org.xml.sax.SAXParseException; lineNumber: 131; columnNumber: 59; cvc-complex-type.2.4.c: 通配符的匹配很全面, 但无法找到元素 'context:component-scan' 的声明。
	2.解决方案：在 Spring 的核配(applicationContext.xml)的头部中，添加 xsi:schemaLocation=" http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd" 用于声明这个信息。
				注意在头部的（xsi:schemaLocation）的声明中，必须是成对存在的，总数量为偶数个。
	3.参考相关博文：http://blog.csdn.net/mydeman/article/details/9374621
	4.关于 xsi:schemaLocation ：用来引用(schema)模式文档，解析器可以在需要的情况下使用这个文档对xml实例文档进行校验。
	  它的值（URI）是成对出现的，第一个值表示命名空间，第二个表示描述该命名空间的模式文档的具体位置，两个值之间以空格分隔。
	
--3.面向注解的Bean装配

--4.基于Java的Spring配置


--第四章 面向切面的Spring

--相关概念：
--//1.横切关注点：在软件开发中，分布于应用中多处的功能。
	2.面向切面编程所要解决的就是将那些横切关注点和业务逻辑分离。
	3.通知、切点、连接点、切面、引入、织入
	--//通知：定义了切面是什么以及何时使用。切面的工作被称为 通知。
	--//连接点：我们的应用可能需要对数以千计的时机应用通知，这些时机被称为 连接点。连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至是修改一个字段时。
				切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。		
	--//切点：一个应用不需要通知应用的所有连接点。切点有助于缩小切面所通知连接点的范围。如果 通知 定义了切面的‘什么’和‘何时’，那么切点就定义‘何处’。
	--//切面：‘切面’是 ‘通知’ 和 ‘切点’ 的结合。（它是什么，在何时何处完成其功能）。以书中提到 抄表员抄表的工作为例：抄表员知道自己要做什么，何时去做，去何处去做。
	--//引入：允许我们向现有的类添加新方法和属性。即 通过切面中定义一个新的属性或者方法，可以通过 引入的方式给 需要的类 添加上新的属性或方法，而不需要修改原先的类。这样保证了原有的方法不变，又增强了功能的扩展性。
	--//织入：将切面应用到目标对象来创建新的代理对象的过程。-----------------这个好抽象啊。自己的理解，就是 某个目标对象 应用了这个切面了，成为了一个新的带切面功能的对象，而这个生成新对象的过程和结果称为织入。
	
	zhengze：通知 和 切点 共同组成的 切面，在于程序 对接时，两者连接的地方 为连接点（这是切面和程序契合的地方），然而 最终是哪些 连接点 会得到通知，是由 切点来定义的。
	
--1.面向切面编程的基本原理
--//创建 ‘切点’ 来定义 ‘切面’ ‘织入’ 的 ‘连接点’ 是AOP框架的基本功能。	

--//Spring AOP 框架的一些关键点：
----//1.Spring 通知是java编写的。
	  2.Spring在运行期通知对象。
	  ----//运行流程：通过标准的java类编写所要使用的是 ‘切面’ 的 ‘通知’，而 其对应的 ‘切点’通常是在Spring的配置文件中采用xml形式编写。
					  通过在代理类中包裹切面，Spring在运行期将 切面 织入 到Spring管理的Bean中。
					  自己的理解：当拦截到方法调用时，在调用目标Bean方法之前，代理会执行切面逻辑。直到应用需要被代理的Bean时，Spring才创建对象。		
					  （Spring 运行时才创建代理对象，所以我们不需要特殊的编译器来织入Spring AOP的切面）	
	  
	  3.Spring只支持方法连接点。因为Spring基于动态代理，所以其只支持方法连接点。如果需要其他方式的连接点，我们可以利用Aspect来协助实现。	
		
--2.为POJO创建切面
----//编写切点	
	  以 执行Student的study()方法时触发‘通知’为例：execution(* com.test.student.study(..))	
	  相关解释：execution() --- 在方式执行时触发 ; 	* --- 返回值，* 表示返回任意类型 ;   com.test.student --- 方法所属的类型;
				study() --- 类的方法 ;  .. --- 使用任意参数
	  注意：1.还有一些操作符，可以连接多个指示器，如：&& 、and 、||、or 、not 等等。
			2.使用Spring 的Bean()指示器，如：execution(xxxxxxx) and !bean(eddie)。-----bean()指示器允许我们在切点表达式中使用Bean的ID来标识Bean。
			  bean()使用Bean ID或者Bean名称作为参数来限制切点只匹配特定的Bean。如果排除某个Bean的话，就如例子中，加 “!” 。
			  
----//1.声明切点，各标签介绍			
	<!--在xml中个声明切面，介绍各个标签  begin-->
    <!--    <aop:config>大部分的AOP配置元素必须在<aop:config>元素的上下文内使用 
        <aop:aspect ref="">定义切面 
            <aop:advisor advice-ref=""></aop:advisor>定义aop通知器 
            <aop:after method="" ></aop:after>定义aop后置通知，不管被通知的方法是否执行成功 
            <aop:after-returning method=""></aop:after-returning>定义aopafter-returning通知 
            <aop:after-throwing method=""></aop:after-throwing>定义after-throwing通知 
            <aop:around method=""></aop:around> 定义aop环绕通知，方法调用前执行一次，方法调用完成，再执行一次 
            <aop:declare-parents types-matching="" implement-interface="">
                为被通知的对象引入额外的接口，并透明地实现
            </aop:declare-parents>
            <aop:pointcut id="" expression=""></aop:pointcut>定义切点 
        </aop:aspect>
    </aop:config>-->
<!--在xml中个声明切面，介绍各个标签  end-->	

----//2.举例说明切面的一般配置
	<!--以GuanZhong类举例测试切面 begin  -->
    <bean id="guanzhong" class="bean.aoptest.GuanZhong"></bean>
    <bean id="yanyuan" class="bean.aoptest.YanYuan"></bean>
    <aop:config>
        <aop:aspect ref="guanzhong">
            <!--           方式一：每个切点单独定义 。        ‘准备马扎’，作为‘演员表演’前执行的切面1
            <aop:before pointcut="execution(* bean.aoptest.YanYuan.biaoyan(..))" method="takeSeats"/>    
            ‘关手机’，作为‘演员表演’前执行的切面2    
            <aop:before pointcut="execution(* bean.aoptest.YanYuan.biaoyan(..))" method="turnOffPhone"/>
            ‘使劲鼓掌’，作为‘演员表演’，成功后执行的切面3
            <aop:after-returning pointcut="execution(* bean.aoptest.YanYuan.biaoyan(..))" method="applaud" />
            ‘退票还钱’，作为‘演员表演’失败后执行的切面4
            <aop:after-throwing pointcut="execution(* bean.aoptest.YanYuan.biaoyan(..))" method="demandRefund"/>    
            “观众说”，作为不管怎么样都要执行的切面
            <aop:after pointcut="execution(* bean.aoptest.YanYuan.biaoyan(..))" method="keng" /> -->

			
            <!--方式二：相同切点，统一定义 begin -->     
            <aop:pointcut id="biaoyan" expression="execution(* bean.aoptest.YanYuan.biaoyan(..))"/>
            <aop:before pointcut-ref="biaoyan" method="takeSeats"/> //准备马扎
            <aop:before pointcut-ref="biaoyan" method="turnOffPhone" /> //关手机
            <aop:after-returning pointcut-ref="biaoyan" method="applaud"/>  //叫好的
            <aop:after-throwing pointcut-ref="biaoyan" method="demandRefund"/> //不满意
            <aop:after pointcut-ref="biaoyan" method="keng"/> //观众最后的感慨
            <!--方式二：相同切点，统一定义 end -->    


			<!--方式三：相同切点，统一定义，这次采用的是 环绕通知的方式 begin -->    
            <aop:pointcut id="biaoyan" expression="execution(* bean.aoptest.YanYuan.biaoyan(..))"/>
            <!--在 watchPerformance() 这个通知方法中，将先前的几个通知方法的逻辑都包含进来了，甚至这个方法还能自己处理异常发生时候的问题。-->
            <aop:around pointcut-ref="biaoyan" method="watchPerformance"/>
            <!--方式三：相同切点，统一定义，这次采用的是 环绕通知的方式 end -->   	
			
        </aop:aspect>
    </aop:config>
    <!--以GuanZhong类举例测试切面 end  -->
	
zhengze ：对上面例子流程的简介：‘演员开始表演’前 需要 观众 做一些 相应的操作，比如：准备马扎，关手机等等，在表演结束后，如果表演的好，需要观众 ‘鼓掌欢迎’，表演的不好，观众表达不满 ，最终，观众要感慨一下下。
		  分析：演员表演是 目标方法 ，观众的一些表现 是 作为自定义的 切面通知。	

----//3.为通知传递参数，以读心者读心举例

	<!--以读心者的举例，测试为通知传递参数 begin -->
    <!--☆☆☆☆☆☆☆ 在本例中使用CGLIB针对类实现代理，增加以下配置，否则报错 ☆☆☆☆☆☆-->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    
    <bean id="mindReadPerson" class="bean.aoptest.MindReadPerson"></bean>
    <bean id="thinker" class="bean.aoptest.Thinker"></bean>
    <aop:config>
        <aop:aspect ref="mindReadPerson">
            <aop:pointcut id="thinking" 
                          expression="execution(* bean.aoptest.Thinker.thinkOfSomething(String)) and args(thoughts)"/>
            
            <aop:before pointcut-ref="thinking" method="interceptThoughts" arg-names="thoughts"/>
        </aop:aspect>
    </aop:config>
    <!--以读心者的举例，测试为通知传递参数 end -->
zhengze：对上面读心者的例子的流程简介，某人只要思考东西，这作为一个目标方法，此时，读心者就会读你的思想，这作为一个 切面通知方法。	在此示例中可以学习下Spring的单元测试。
	
----//4.通过切面引入新的功能
	<!--通过 切面 实现给  某个对象 增加 新的方法 begin -->
    <bean id="xiaoming" class="bean.aoptest2.XiaoMing"></bean>
    <bean id="doSomething" class="bean.aoptest2.DoSomething"></bean>

    <aop:config proxy-target-class="true">
        <aop:aspect>
            <aop:declare-parents 
                types-matching="bean.aoptest2.XiaoMing" 
                implement-interface="bean.aoptest2.AddInterface"
                default-impl="bean.aoptest2.DoSomething"/>
            <!--    相关介绍：types-matching == 之前原始的类 ； implement-interface == 想要添加的功能的接口 ；
            default-impl == 新功能默认实现的类-->
        </aop:aspect>
    </aop:config>
    
    <!--通过 切面 实现给  某个对象 增加 新的方法 end -->

	
	
zhengze:在写自定义切面的demo时候，遇到的情况：
----//1.Caused by: java.lang.ClassNotFoundException: org.aspectj.weaver.tools.PointcutDesignatorHandler  -------- 开始在maven中央库中，直接找这个jar，没有找到。但是可以采用这个jar，效果是一样的：aspectjweaver-1.8.8.jar	
----//2.Caused by: java.lang.NoClassDefFoundError: org/aopalliance/aop/Advice	--------- 导入这个jar，就可以：aopalliance-1.0.jar 。但是貌似这个jar的版本较低。
----//3.but was actually of type [com.sun.proxy.$Proxy0] ------ 没有采用接口模式编程,所以报错。如果不才用接口模式那么 就要用CGLIB，而CGLIB是针对类实现代理。（主要生成一个子类，覆盖其中的方法）因为是继承，所以该类或方法最好不要声明成final的类	
																需要在xml配置中增加：  <aop:aspectj-autoproxy proxy-target-class="true" /> 即可。相关博文：http://wukaxi.iteye.com/blog/1402143
																
																

--3.使用@AspectJ 注解

zhengze:在这里通过使用@AspectJ注解的形式，将前面的几个xml配置的aop切面的例子重新实现了一下。
		主要分为如下几种情况：1.一般形式的（以 演员表演、观众反应的例子测试的，包括 表演前、表演、表演后等情况）；
							  2.环绕通知的形式（将 观众的多种动作表现与演员表演 集成到一个类中）；	
							  3.给通知传递参数（采用的是读心者的例子）；
							  4.标注引入，给先前的Bean增加一个新的方法（以 小明说中国话 举例）；注意在这个例子中，需要增加一个 Bean ，并且用@AspectJ注解标示，用来承接 原先的Bean 与 新的功能的实现的Bean 。
								第一次写demo时候，没有给这个 用于承接的Bean ，添加 @AspectJ 注解，总是报错。增加即可。
											
--4.为 AspectJ 切面注入依赖
---------------当Spring AOP不能满足要求时候，需要使用更强大的 AspectJ ，此处需要实现 如何使用Spring为 AspectJ 切面注入依赖。
---------------注^(*￣(oo)￣)^ ：此处的测试示例，没有完成，需要后面继续实现。
---------------到此，Spring框架的基础知识已基本覆盖。包括：如何配置Spring容器，如何为Spring管理的对象创建切面。接下来就是学习 如何使用Spring简化企业应用系统的开发。


--第二部分  Spring 应用程序的核心组件
---数据库、事务管理、SpringMVC构建web应用、使用SpringWebFlow、保护Spring应用

--第五章 征服数据库

----相关概念：
-- ORM ：Object Relational Mapping ，对象关系映射。
-- DAO ：data access object，数据访问对象
-- 贯穿整个DAO框架的统一异常体系
-- JNDI ：Java Naming and Directory Interface, Java命名和目录接口
-- DBCP ：DataBase COnnection Pool。数据库连接池。是 apache 上的一个java连接池项目，也是tomcat使用的连接池组件。使用的jar：commons-dbcp.jar,commons-pool.jar

--1.定义Spring对数据访问的支持

--//数据访问异常体系
--//数据访问模板化，在这里列举了 Spring提供的数据访问模板，分别适用于不同的持久化机制。
--//使用DAO支持类，

--2.配置数据库资源

--//以DBCP连接池为例，讲了其在Spring配置文件中的配置情况。列举了一些必要的配置属性和常用的配置属性。
--//基于JDBC驱动的数据源。注意：1.DriverManagerDataSource 在每个连接请求时都会返回一个新建的连接。这与 DBCP 中的 BasicDataSource 不同，其没有对连接做池化管理。
								2.SingleConnectionDataSource 在每个连接请求时都会返回同一个连接。可以将其视为只有一个连接的池。
								3.两者的配置与 DBCP 中的 BasicDataSource 类似。
								4.DriverManagerDataSource 可以支持多线程，但是每次请求都会创建新连接，这是以性能为代价的。

--3.使用Spring的JDBC模板
--//Spring 为JDBC 提供了3个模板类供使用 ：1.JdbcTemplate ：最基本的Spring JDBC 模板
										  2.NamedParameterJdbcTemplate 
										  3.SimpleJdbcTemplate ，较之前两个，更好些。
				


--4.Spring 与 Hibernate 和 JPA集成使用








///////////20160520////////////////凡是让我痛苦的，都是让我强大的。
///////////20160523////////////////我总是把自己代入到那个幻境中，一首歌，一行文字，殊不知，这只是自己创造的幻境，一切都是一厢情愿和虚无缥缈，凡是感情而言，只有索取，不管是情感还是物质上，
								   绝对不会有好的结果，与之对应的，只有付出，亦或情感，亦或物质，同样是一种病态。幼稚幼稚幼稚（说三遍），我们加油吧！
///////////20160524////////////////我决定锻炼肌肉了，不仅仅是耐力，哈哈哈...这个想法，貌似是个笑话。
///////////20160525////////////////有时候，看东西，尤其是详细的看东西，会莫名的烦躁，这是大忌啊，深呼吸，平静一下。

///////////20160527////////////////昨天，夜跑，共计五点四公里。其中三公里，配速五分钟以内，效果显著，再接再厉。
///////////20160603////////////////历时四天，王敏帮助，导入又导出完成。阿弥陀佛..下周就去新的项目组了，兵来将挡水来土掩，也没有什么好担心的，提前准备，提前修炼，时不待我，加油！明天想去爬山，这么久了，解脱下..
///////////20160606////////////////新项目，第一天。越努力，越幸运。
///////////20160607////////////////没有什么好抱怨的，做积极的人，做积极的事，积累积累积累，学习学习学习。等我再回首，必将是一个很大的财富.
///////////20160614////////////////动手实战才是学IT的正确姿势
*****************************************************************************************************
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
									插曲：jqGrid学习与应用
									
1.准备需要的css和js
2.

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
--sqlserver 2008 学习与应用

1.启动sqlserver2008r2数据库，

2.熟悉sqlserver存储过程，

-- Q1【 must be the first statement in a query batch.】 CREATE PROCEDURE必须是批查询的第一个语句。就是说，把create procedure 放在第一行。 

3.sqlserver相关函数，

4.临时表tempdb，

5.其他

 ---- CASE WHEN与 MAX 或 SUN 的联合使用 

 ---- var a  = $.parseJSON(json_data);  ---可以转换数组形式的json字符串，前端的吆，哈哈
 
 ---- rank() over(partition by 列1，列2 等 order by 列xx ) 
 --		partition by 用于给结果集分组，如果没有指定，则是对整个结果集作为一个分组
 --		rank() 用于在分组内部进行排序。需要注意的是，ran()是跳跃排序，即：如果有两个第1名，则接下来就是第3，忽略第2的情况。
 
 ---- SQLSERVER还原数据库失败：错误: 3154
 
----------------------------------------------------------------------------------------------------
--关于mysql数据学习应用
1.使用图形化界面：sqlyog 、 mysql workbench
2.利用命令行，建立数据库，用户等，参考博客  http://blog.csdn.net/vebasan/article/details/7615413    /////  http://www.2cto.com/database/201506/406212.html

3.mysql 免安装版 配置教程：http://blog.csdn.net/q98842674/article/details/12094777
 
---------------------------------------------------------------------------------------------------- 
javamail

注意：1.使用163邮箱时候，需要配置 pop3\smtp\imap等
	  2.配置完成后，163会强制你设置 ‘客户端授权密码’，这也是为了安全考虑。然后在程序的xml文件配置时候，这个邮箱的密码就是你设置的 ‘客户端授权密码’ 。	
	  3.遇到的相关exception:
		3.1.javax.mail.AuthenticationFailedException: 530 Error: A secure connection is requiered(such as ssl). More information at http://service.mail.qq.com/cgi-bin/help?id=28 （qq邮箱的问题，暂时未解决）
		3.2.550 User has no permission （163的问题。需要配置上面的那些..）
		3.3.javax.mail.AuthenticationFailedException: 535 Error: authentication failed  （163的问题。账户密码不对，一般需要检查你设置的 客户端授权码 是否正确）

-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------

需要整理的文章：
后端：
1.java对于数据流的读取和处理
2.java对于xml文件的处理
3.java对于json数据的处理
4.java对于dbf文件的读写
5.java自定义异常
6.java对于csv文件的读写
7.对于数据库连接池的配置

8.myeclipse配置需要的jdk


9.redis在windows下的简单测试使用（127.0.0.1:6379）
  redis 介绍和作用，呵呵呵呵呵，没搞明白具体做的工作以及它的优劣势	
  Spring 与 redis 的整合
  

前端：
1.表格插件
2.表单验证插件


-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------







            








	
	
	


